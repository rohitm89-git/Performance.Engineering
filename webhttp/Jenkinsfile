pipeline {
    agent any

    environment {
        PROJECT_ID = 'rugged-sunbeam-438811-a1'
        ZONE = 'asia-south2-a'
        SERVICE_ACCOUNT_KEY = credentials('gcloud-svc-account')
        CONTROLLER_MACHINE_TYPE = 'e2-micro'
        // LOAD_GENERATOR_MACHINE_TYPE = 'n1-standard-2'
        IMAGE_FAMILY = 'ubuntu-2004-lts' // or 'windows-server-2019' for Windows   
    }

    // parameters {
    //     string(defaultValue: '1', name: 'threads', trim: true)
    //     string(defaultValue: '2', name: 'rampup', trim: true)
    //     string(defaultValue: '1', name: 'loop', trim: true)
    // }
    
    parameters {
        string defaultValue: "1", name: "threads", trim: true
        string defaultValue: "1", name: "rampup", trim: true
        string defaultValue: "1", name: "loop", trim: true
    }


    stages {
        stage('Provision VMs') {
            steps {
                script {
                    // Authenticate with Google Cloud
                    sh '''
                        gcloud auth activate-service-account --key-file=${SERVICE_ACCOUNT_KEY}
                        gcloud config set project ${PROJECT_ID}
                    '''
                    
                    // Create Controller/LG VM
                    sh '''
                        gcloud compute instances create jmeter-controller \
                            --zone=${ZONE} \
                            --machine-type=${CONTROLLER_MACHINE_TYPE} \
                            --image-family=${IMAGE_FAMILY} \
                            --image-project=${IMAGE_PROJECT}
                    '''
                    
                    // Create Load Generator VMs
                    // sh '''
                    //     gcloud compute instances create jmeter-loadgen-1 jmeter-loadgen-2 \
                    //         --zone=${ZONE} \
                    //         --machine-type=${LOAD_GENERATOR_MACHINE_TYPE} \
                    //         --image-family=${IMAGE_FAMILY} \
                    //         --image-project=${IMAGE_PROJECT}
                    // '''
                }
            }
        }

        stage('scm-checkout'){
            steps {
                git branch: 'feature/cloud-integration', credentialsId: '8cf536f0-c46a-4cbc-abd8-1d4c807a2986', url: 'git@github.com:rohitm89-git/Performance.Engineering.git'
            }
        }
        
        stage('jmeter-test-run') {
            steps {
                // Run Maven on a Windows agent.
                bat """cd webhttp/
                mvn -Dthreads.count=${threads} -Drampup.duration=${rampup} -Dloop.count=${loop} clean verify"""
            }
        
            post {
                // If Maven was able to run the tests archive jtl and graphs
                success {
                    // copy required files to a new directory - written inside script block as groovy code is present
                    script{
                        def targetDir = "${WORKSPACE}\\webhttp\\target\\allArtifacts"
                        bat """ mkdir ${targetDir}
                        xcopy ${WORKSPACE}\\webhttp\\target\\jmeter\\results\\ ${targetDir} /s
                        xcopy ${WORKSPACE}\\webhttp\\target\\jmeter\\reports\\ ${targetDir} /s"""
                    
                    // def targetDir = "**/webhttp/target/allArtifacts"
                    // bat """ mkdir ${targetDir}
                    // xcopy ${WORKSPACE}/webhttp/target/jmeter/results/ ${targetDir} /s
                    // xcopy ${WORKSPACE}/webhttp/target/jmeter/reports/ ${targetDir} /s"""
                    
                    // xcopy ${WORKSPACE}/webhttp/target/jmeter/results/ ${WORKSPACE}/webhttp/target/allArtifacts /s
                    
                    
                    // zip zipFile: "allArtifacts-${BUILD_NUMBER}.zip", archive: false, dir: "webhttp/target/jmeter/results/"
                        // zip zipFile: "**\\webhttp\\target\\allArtifacts-${BUILD_NUMBER}.zip", archive: false, dir: "${targetDir}"
                        zip zipFile: "${WORKSPACE}\\webhttp\\target\\allArtifacts-${BUILD_NUMBER}.zip", archive: false, dir: "${targetDir}"    
                    
                        archiveArtifacts "webhttp\\target\\allArtifacts-${BUILD_NUMBER}.zip"
                    }
                    // archiveArtifacts '**/webhttp/target/jmeter/results/'
                }
            }
        }
        
        stage('publish-performance-trend-report'){
            steps{
                // perfReport sourceDataFiles: "**/*.csv", compareBuildPrevious: true, graphType: "Percentile Response Time", showTrendGraphs: true
                perfReport filterRegex: "", graphType: "PRT", percentiles: "90,95,99", showTrendGraphs: true, sourceDataFiles: "**/*.csv", compareBuildPrevious: true
            }
        }
        
        stage('clear workspace'){
            steps{
                cleanWs(patterns: [[pattern: 'allArtifacts*', type: 'INCLUDE']])
            }
        }
    }
}

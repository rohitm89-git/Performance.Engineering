pipeline {
    agent any

    environment {
        // PROJECT_ID = 'rugged-sunbeam-438811-a1'
        // ZONE = 'asia-south2-a'
        // SERVICE_ACCOUNT_KEY = credentials('gcloud-svc-account')
        // CONTROLLER_MACHINE_TYPE = 'e2-micro'
        // // LOAD_GENERATOR_MACHINE_TYPE = 'n1-standard-2'
        // IMAGE_FAMILY = 'ubuntu-2004-lts' // or 'windows-server-2019' for Windows   

        CLOUDSDK_CORE_PROJECT='rugged-sunbeam-438811-a1'
        PROJECT_ID = 'rugged-sunbeam-438811-a1' // Replace with your Google Cloud project ID
        ZONE = 'asia-south2-a' // Replace with your preferred zone
        MACHINE_TYPE = 'e2-medium' // Basic machine type
        IMAGE_FAMILY = 'ubuntu-2204-lts' //  fetch from: gcloud compute images list
        IMAGE_PROJECT = 'ubuntu-os-cloud' // fetch from: gcloud compute images list
        SERVICE_ACCOUNT_KEY = credentials('gcloud-svc-account') // Service account credentials from Jenkins
        CLIENT_EMAIL = 'sdet101@rugged-sunbeam-438811-a1.iam.gserviceaccount.com'
        // INSTANCE_NAME = 'jenkins-ubuntu-test-instance'
        INSTANCE_NAME = 'jenkins-ubuntu-lg1'
    }

    // parameters {
    //     string(defaultValue: '1', name: 'threads', trim: true)
    //     string(defaultValue: '2', name: 'rampup', trim: true)
    //     string(defaultValue: '1', name: 'loop', trim: true)
    // }
    
    parameters {
        string defaultValue: "1", name: "threads", trim: true
        string defaultValue: "1", name: "rampup", trim: true
        string defaultValue: "1", name: "loop", trim: true
    }


    stages {
        stage('Authenticate with Google Cloud') {
            steps {
                script {
                    // Authenticate with Google Cloud using the service account
                    bat '''
                        gcloud version ^
                        && gcloud auth activate-service-account --key-file="%SERVICE_ACCOUNT_KEY%" ^
                        && gcloud compute zones list
                    '''
                }
            }
        }

        // stage('Create Linux Compute Instance') {
        //     steps {
        //         script {
        //             // Create a new Linux Compute Engine instance
        //             bat '''
        //                 gcloud compute instances create %INSTANCE_NAME% ^
        //                 --zone=%ZONE% ^
        //                 --machine-type=%MACHINE_TYPE% ^
        //                 --image-family=%IMAGE_FAMILY% ^
        //                 --image-project=%IMAGE_PROJECT% ^
        //                 --boot-disk-size=100GB ^
        //                 --metadata ubuntu-startup-script-ps1="Write-Host \\"Instance startup complete\\""
        //             '''
        //         }
        //     }
        // }

        // stage('Start compute instance') {
        //     steps {
        //         script {
        //             // SSH into the Windows instance and run the command to display gcloud version
        //             bat '''
        //                 gcloud compute instances start %INSTANCE_NAME% --zone=%ZONE%
        //             '''
        //         }
        //     }
        // }

        // stage('Find out who is SSHing to vm') {
        //     steps {
        //         script {
        //             bat '''
        //                 gcloud compute ssh jenkins-windows-test-instance
        //             '''
        //         }
        //     }
        // } //ROHIT is doing it
        
        // stage('Run Command on Linux Instance') {
        //     steps {
        //         script {
        //             //sleep 60 // sleep time to allow instance to fully boot before attempting SSH
        //             // SSH into the Windows instance and run the command to display gcloud version with retry loop
        //             // created a directory to copy files from jenkins workspace to vm
        //             retry(5){
        //                 bat '''
        //                 gcloud compute ssh %INSTANCE_NAME% --zone=%ZONE% --command="gcloud --version; \
        //                 ip -f inet address; \
        //                 mkdir jmeter-project; \
        //                 echo \\"this is inside the linux VM\\""
        //             '''
        //             }
        //         }
        //     }
        // }

        stage('scm-checkout'){
            steps {
                git branch: 'feature/cloud-integration', credentialsId: '8cf536f0-c46a-4cbc-abd8-1d4c807a2986', url: 'git@github.com:rohitm89-git/Performance.Engineering.git'
            }
        }

        // stage('Copy maven project to VM') {
        //     steps {
        //         script {
        //             // Copy the checked out project to the VM
        //             // sh '''
        //             //     gcloud compute scp -r ./* ${INSTANCE_NAME}:~/maven-project --zone=${ZONE}
        //             // '''
        //             bat '''
        //                 gcloud compute ssh %INSTANCE_NAME% --zone=%ZONE% --command="mkdir jmeter-project" ^
        //                 && echo %WORKSPACE% ^
        //                 && gcloud compute scp --recurse "%WORKSPACE%\\webhttp" %INSTANCE_NAME%:/home/Rohit/jmeter-project --zone=%ZONE%
        //             '''
        //         }
        //     }
        // }

        // stage('Install Dependencies on VM') { // this step failed though installations were successful. need to add checks.
        //     steps {
        //         script {
        //             // SSH into the VM and install Maven, Java, JMeter
        //             // catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        //             bat '''
        //                 gcloud compute ssh %INSTANCE_NAME% --zone=%ZONE% --command="sudo apt-get update; \
        //                 sudo apt install openjdk-11-jdk; \
        //                 java --version; \
        //                 sudo apt install maven -y; \
        //                 mvn --version"
        //             '''
        //                     // wget https://downloads.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz;
        //                     // tar -xvzf apache-jmeter-5.5.tgz;"
        //             // }
        //         }
        //     }
        // }

        // stage('Install and Configure Jmeter') {
        //     steps {
        //         script {
        //             def lgInstances = ['jenkins-ubuntu-lg1']
        //             // def setupScript =  '''
        //             //     wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz; \
        //             //     tar -xvzf apache-jmeter-5.6.3.tgz;
        //             // '''

        //             // loop through each instance and install jmeter
        //             for(instance in lgInstances){
        //                 bat '''
        //                 gcloud compute ssh %INSTANCE_NAME% --zone=%ZONE% --command="\
        //                 wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz; \
        //                 tar -xvzf apache-jmeter-5.6.3.tgz;"
        //             '''
        //             }
                    
        //         }
        //     }
        // }

        // stage('Start jmeter-server on load gens instances') {
        //     steps {
                
        //     }
        // }

        stage('add remote hosts to controller user.prop file') {
            steps {
                script{
                    def lgInstances = ['jenkins-ubuntu-lg1']
                    for(instance in lgInstances){
                        def externalIp = bat(script: "gcloud compute instances describe ${instance} --zone=${zone} --format='get(networkInterfaces[0].accessConfigs[0].natIP)'", returnStdout: true).trim()
                        def internalIp = bat(script: "gcloud compute instances describe ${instance} --zone=${zone} --format='get(networkInterfaces[0].networkIP)'", returnStdout: true).trim()
                        bat '''
                            echo "${externalIp} - ${internalIp}" ^
                            && ping ${externalIp}
                        '''
                    }
                    
                }                
            }
        }
        
        // stage('jmeter-test-run') {
        //     steps {
        //         // Run Maven on a Windows agent.
        //         // bat """cd webhttp/
        //         // mvn -Dthreads.count=${threads} -Drampup.duration=${rampup} -Dloop.count=${loop} clean verify"""
        //         script {
        //             // Run the JMeter tests on the VM using the Maven project
        //             bat '''
        //                 gcloud compute ssh %INSTANCE_NAME% --zone=%ZONE% --command="cd /home/Rohit/jmeter-project/webhttp; \
        //                 mvn -Dthreads.count=${threads} -Drampup.duration=${rampup} -Dloop.count=${loop} verify"
        //             '''
        //         }
        //     }
        
        //     post {
        //         // If Maven was able to run the tests archive jtl and graphs
        //         success {
        //             // copy required files to a new directory - written inside script block as groovy code is present
        //             // $ notation works probably because bat commands are inside """ instead of '''. havent tested though.
        //             script{
        //                 def targetDir = "${WORKSPACE}\\webhttp\\target\\allArtifacts"
        //                 bat """ 
        //                     mkdir ${targetDir} ^
        //                     && gcloud compute scp --recurse %INSTANCE_NAME%:/home/Rohit/jmeter-project/webhttp/target/jmeter/results ${targetDir} --zone=%ZONE% ^
        //                     && gcloud compute scp --recurse %INSTANCE_NAME%:/home/Rohit/jmeter-project/webhttp/target/jmeter/reports ${targetDir} --zone=%ZONE%
        //                 """
                    
        //             // def targetDir = "**/webhttp/target/allArtifacts"
        //             // bat """ mkdir ${targetDir}
        //             // xcopy ${WORKSPACE}/webhttp/target/jmeter/results/ ${targetDir} /s
        //             // xcopy ${WORKSPACE}/webhttp/target/jmeter/reports/ ${targetDir} /s"""
                    
        //             // xcopy ${WORKSPACE}/webhttp/target/jmeter/results/ ${WORKSPACE}/webhttp/target/allArtifacts /s
                    
                    
        //             // zip zipFile: "allArtifacts-${BUILD_NUMBER}.zip", archive: false, dir: "webhttp/target/jmeter/results/"
        //                 // zip zipFile: "**\\webhttp\\target\\allArtifacts-${BUILD_NUMBER}.zip", archive: false, dir: "${targetDir}"
        //                 zip zipFile: "${WORKSPACE}\\webhttp\\target\\allArtifacts-${BUILD_NUMBER}.zip", archive: false, dir: "${targetDir}"    
                    
        //                 archiveArtifacts "webhttp\\target\\allArtifacts-${BUILD_NUMBER}.zip"
        //             }
        //             // archiveArtifacts '**/webhttp/target/jmeter/results/'

        //             // script {
        //             // // Copy the JMeter results from the VM back to Jenkins
        //             // bat '''
        //             //     gcloud compute scp %INSTANCE_NAME%:/home/Rohit/jmeter-project/webhttp/target/jmeter/results/* ./results_hello --zone=%ZONE%
        //             // '''
        //             // // Archive the results as Jenkins artifacts
        //             // archiveArtifacts artifacts: 'results_hello/*', allowEmptyArchive: true
        //             // }                    
        //         }
        //     }
        // }
        
        // stage('publish-performance-trend-report'){
        //     steps{
        //         // perfReport sourceDataFiles: "**/*.csv", compareBuildPrevious: true, graphType: "Percentile Response Time", showTrendGraphs: true
        //         perfReport filterRegex: "", graphType: "PRT", percentiles: "90,95,99", showTrendGraphs: true, sourceDataFiles: "**/*.csv", compareBuildPrevious: true
        //     }
        // }
        
        // stage('clear workspace'){
        //     steps{
        //         cleanWs(patterns: [[pattern: 'allArtifacts*', type: 'INCLUDE']])
        //     }
        // }
    }

    post {
            always {
                cleanWs(deleteDirs: true, patterns: [[pattern: 'webhttp/target/allArtifacts*', type: 'INCLUDE']])
            }
        }
}
